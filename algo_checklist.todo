Algoexpert:
☐ 1. Depth First Search - Stack @critical 
    Setting up a DFS, recursion:
        (a) write a dfs helper function
        (b) set up base case, for tree/graphs it is checking if the node is null.
        (c) call the helper function for both right/left nodes 
    Depth First Traversals:
        (a) Inorder (Left, Root, Right) - Left to right
        (b) Preorder (Root, Left, Right) - Root first, left -> right
        (c) Postorder (Left, Right, Root) - Root last

☐ 2. Breadth First Search - Queue - to find shortest path to a target node. @critical 
    Setting up a BFS, queue:
        (a) declare a queue with root node as initial value
        (b) declare while loop that runs while queue.length > 0
        (c) declare rowSize = queue.length, and row array - we're going to use this for next loop
        (d) declare secondary while loop which runs until rowSize = 0;
        (e) declare currentNode var in while loop that shifts from queue
        (f) push currentNode children into queue, decrease rowSize, push currentNode value into row array 
        (g) push row into result
☐ 3. Matching Parenthesis - Stack @critical 
        (a) declare an object with key : value for each bracket
        (b) declare stack and loop through provided array
        (c) if there is a closing bracket, start returning the values in stack for comparison.
☐ 4. Hash Tables - Fibonacci’s Sequence @critical
☐ 5. How to Manipulate Multiple Pointers - Longest Palindromic Sub-String @critical
☐ 6. Reversing a Linked List - Use 3 Pointers @critical
☐ 7. Sorting Fundamentals - Understand concepts of Merge Sort, Quick Sort (Choose a Pivot - Divide in half), Insertion Sort and know the Runtime (BigO of nLogn)
☐ 8. Recursion - What you’re doing at every iteration & Base Case
☐ 9. Construct Data Structures - construct a Class method (OO programming) 
☐ 10. Binary Search - Find the CRASH version of an application on GitHub (Logn)

Algorithms:
String, Matrix, Heap, Graph, Sorting, Dynamic Programming, Bit Manipulation, Combinations, Permutations, Math, Trie

Data Structures:
Hash Tables, Binary Search Tree, Array, Graph, Queues, Linked Lists, Tree

Things to know:
    - How to declare a new tree
        let treeNode = new TreeNode(0)
        let current = treeNode    
        for (let i = 0; i < stack.length ;i++) {
            current.right = new TreeNode(stack[i])
            current = current.right
        }
    - Graphs/Trees Nodes have to keep track of their edges as a property with an [] value.
    - How to declare Hash Map     
        let map = {
            2: ['a', 'b', 'c'],
            3: ['d', 'e', 'f'],
            4: ['g', 'h', 'i'],
            5: ['j', 'k', 'l'],
            6: ['m', 'n', 'o'],
            7: ['p', 'q', 'r', 's'],
            8: ['t', 'u', 'v'],
            9: ['w', 'x', 'y', 'z'],
        }
    - Iterating over an object can be done with:
        for(const [key, value] of Object.entries(obj))
        for(const key in Obj)
    - Sets, similar to arrays but faster with removing elements.
        - How to initialize, check values against the set and update the set.
            let set = new Set();
            set.has(value) = true || false; // returns boolean value based on if the value is present
            set.add(value) // add value to set
            set.delete(value) // remove value from set
